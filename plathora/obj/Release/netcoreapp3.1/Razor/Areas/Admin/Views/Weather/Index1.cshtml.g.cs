#pragma checksum "F:\yogita 6.8.19\plathora\plathora\Areas\Admin\Views\Weather\Index1.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "8db9dca04e042b994fc1b9ccf2213f7ec78b9194"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Areas_Admin_Views_Weather_Index1), @"mvc.1.0.view", @"/Areas/Admin/Views/Weather/Index1.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "F:\yogita 6.8.19\plathora\plathora\Areas\Admin\Views\_ViewImports.cshtml"
using plathora;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "F:\yogita 6.8.19\plathora\plathora\Areas\Admin\Views\_ViewImports.cshtml"
using plathora.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"8db9dca04e042b994fc1b9ccf2213f7ec78b9194", @"/Areas/Admin/Views/Weather/Index1.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"396188bb9b5a5b30811f4f1a58a7e68134b9e9d4", @"/Areas/Admin/Views/_ViewImports.cshtml")]
    public class Areas_Admin_Views_Weather_Index1 : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
            WriteLiteral(@"    <script src=""https://maps.google.com/maps/api/js?key=AIzaSyCNpeRgwCQoHIlLn-X8TIB9SnO8iLPt808&callback=initMap""
            async defer></script>

<input type=""button"" value=""Show My Position"" onclick=""display()"">
<br>
<div id=""result""></div>

<script type=""text/javascript"">

    function display() {
        navigator.geolocation.getCurrentPosition(
            function (position) {

                var location = position.coords.latitude + ',' + position.coords.longitude;
                alert(location);
                var coordinates = [lat, lng];

                var lat = position.coords.latitude.toString();
                var lng = position.coords.longitude.toString();
                codeLatLng(lat, lng);


                // codeLatLng(position.coords.latitude, position.coords.longitude)
                //var img_url = 'http://maps.googleapis.com/maps/api/staticmap?center=' + location + '&zoom=14&size=400x300&sensor=false';
                //document.getElementById('result'");
            WriteLiteral(@").innerHTML = '<img src=""' + img_url + '"">';
            },
            function (error) {
                switch (error.code) {
                    case error.PERMISSION_DENIED:
                        document.getElementById('result').innerHTML = ""User denied the request for Geolocation.""
                        break;
                    case error.POSITION_UNAVAILABLE:
                        document.getElementById('result').innerHTML = ""Location information is unavailable.""
                        break;
                    case error.TIMEOUT:
                        document.getElementById('result').innerHTML = ""The request to get user location timed out.""
                        break;
                    case error.UNKNOWN_ERROR:
                        document.getElementById('result').innerHTML = ""An unknown error occurred.""
                        break;
                }
            }


        );
    }


    function displayLocation(latitude, longitude) {
        var req");
            WriteLiteral(@"uest = new XMLHttpRequest();

        var method = 'GET';
        var url = 'https://maps.googleapis.com/maps/api/geocode/json?latlng=' + latitude + ',' + longitude + '&sensor=true';
        var async = true;

        request.open(method, url, async);
        request.onreadystatechange = function () {
            if (request.readyState == 4 && request.status == 200) {
                var data = JSON.parse(request.responseText);
                var address = data.results[0];
                alert(address);

                //document.write(address.formatted_address);
            }
        };
        request.send();
    };

    function codeLatLng(lat, lng) {

        var latlng = new google.maps.LatLng(lat, lng);
        geocoder.geocode({ 'latLng': latlng }, function (results, status) {
            if (status == google.maps.GeocoderStatus.OK) {
                console.log(results)
                if (results[1]) {
                    //formatted address
                    alert(res");
            WriteLiteral(@"ults[0].formatted_address)
                    //find country name
                    for (var i = 0; i < results[0].address_components.length; i++) {
                        for (var b = 0; b < results[0].address_components[i].types.length; b++) {

                            //there are different types that might hold a city admin_area_lvl_1 usually does in come cases looking for sublocality type will be more appropriate
                            if (results[0].address_components[i].types[b] == ""administrative_area_level_1"") {
                                //this is the object you are looking for
                                city = results[0].address_components[i];
                                break;
                            }
                        }
                    }
                    //city data
                    alert(city.short_name + "" "" + city.long_name)


                } else {
                    alert(""No results found"");
                }
            }");
            WriteLiteral(@" else {
                alert(""Geocoder failed due to: "" + status);
            }
        });
    }
    //function getCity(coordinates) {
    //    var xhr = new XMLHttpRequest();
    //    var lat = coordinates[0];
    //    var lng = coordinates[1];

    //    // Paste your LocationIQ token below.
    //    xhr.open('GET', ""https://us1.locationiq.com/v1/reverse.php?key=YOUR_PRIVATE_TOKEN&lat="" + lat + ""&lon="" + lng + ""&format=json"", true);
    //    xhr.send();
    //    xhr.onreadystatechange = processRequest;
    //    xhr.addEventListener(""readystatechange"", processRequest, false);

    //    function processRequest(e) {
    //        if (xhr.readyState == 4 && xhr.status == 200) {
    //            var response = JSON.parse(xhr.responseText);
    //            var city = response.address.city;
    //            alert(city);
    //            console.log(city);
    //            return;
    //        }
    //    }
    //}
</script>






");
            WriteLiteral("\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
